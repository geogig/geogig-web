/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Geogig);
  }
}(this, function(expect, Geogig) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Geogig.CollaborationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CollaborationApi', function() {
    describe('checkout', function() {
      it('should call checkout successfully', function(done) {
        //uncomment below and update the code to test checkout
        //instance.checkout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBranch', function() {
      it('should call createBranch successfully', function(done) {
        //uncomment below and update the code to test createBranch
        //instance.createBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPullRequest', function() {
      it('should call createPullRequest successfully', function(done) {
        //uncomment below and update the code to test createPullRequest
        //instance.createPullRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBranch', function() {
      it('should call deleteBranch successfully', function(done) {
        //uncomment below and update the code to test deleteBranch
        //instance.deleteBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBranch', function() {
      it('should call getBranch successfully', function(done) {
        //uncomment below and update the code to test getBranch
        //instance.getBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentBranch', function() {
      it('should call getCurrentBranch successfully', function(done) {
        //uncomment below and update the code to test getCurrentBranch
        //instance.getCurrentBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPullRequest', function() {
      it('should call getPullRequest successfully', function(done) {
        //uncomment below and update the code to test getPullRequest
        //instance.getPullRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isPullRequestMerged', function() {
      it('should call isPullRequestMerged successfully', function(done) {
        //uncomment below and update the code to test isPullRequestMerged
        //instance.isPullRequestMerged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBranches', function() {
      it('should call listBranches successfully', function(done) {
        //uncomment below and update the code to test listBranches
        //instance.listBranches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPullRequests', function() {
      it('should call listPullRequests successfully', function(done) {
        //uncomment below and update the code to test listPullRequests
        //instance.listPullRequests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mergePullRequest', function() {
      it('should call mergePullRequest successfully', function(done) {
        //uncomment below and update the code to test mergePullRequest
        //instance.mergePullRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePullRequest', function() {
      it('should call updatePullRequest successfully', function(done) {
        //uncomment below and update the code to test updatePullRequest
        //instance.updatePullRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
