/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Geogig);
  }
}(this, function(expect, Geogig) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Geogig.FeatureServiceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeatureServiceApi', function() {
    describe('addFeatures', function() {
      it('should call addFeatures successfully', function(done) {
        //uncomment below and update the code to test addFeatures
        //instance.addFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLayer', function() {
      it('should call createLayer successfully', function(done) {
        //uncomment below and update the code to test createLayer
        //instance.createLayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFeature', function() {
      it('should call deleteFeature successfully', function(done) {
        //uncomment below and update the code to test deleteFeature
        //instance.deleteFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFeatures', function() {
      it('should call deleteFeatures successfully', function(done) {
        //uncomment below and update the code to test deleteFeatures
        //instance.deleteFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLayer', function() {
      it('should call deleteLayer successfully', function(done) {
        //uncomment below and update the code to test deleteLayer
        //instance.deleteLayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBounds', function() {
      it('should call getBounds successfully', function(done) {
        //uncomment below and update the code to test getBounds
        //instance.getBounds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeature', function() {
      it('should call getFeature successfully', function(done) {
        //uncomment below and update the code to test getFeature
        //instance.getFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatures', function() {
      it('should call getFeatures successfully', function(done) {
        //uncomment below and update the code to test getFeatures
        //instance.getFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayerHash', function() {
      it('should call getLayerHash successfully', function(done) {
        //uncomment below and update the code to test getLayerHash
        //instance.getLayerHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayerInfo', function() {
      it('should call getLayerInfo successfully', function(done) {
        //uncomment below and update the code to test getLayerInfo
        //instance.getLayerInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayersSummaries', function() {
      it('should call getLayersSummaries successfully', function(done) {
        //uncomment below and update the code to test getLayersSummaries
        //instance.getLayersSummaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSchema', function() {
      it('should call getSchema successfully', function(done) {
        //uncomment below and update the code to test getSchema
        //instance.getSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSize', function() {
      it('should call getSize successfully', function(done) {
        //uncomment below and update the code to test getSize
        //instance.getSize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserLayersSummaries', function() {
      it('should call getUserLayersSummaries successfully', function(done) {
        //uncomment below and update the code to test getUserLayersSummaries
        //instance.getUserLayersSummaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLayers', function() {
      it('should call listLayers successfully', function(done) {
        //uncomment below and update the code to test listLayers
        //instance.listLayers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyFeature', function() {
      it('should call modifyFeature successfully', function(done) {
        //uncomment below and update the code to test modifyFeature
        //instance.modifyFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyFeatures', function() {
      it('should call modifyFeatures successfully', function(done) {
        //uncomment below and update the code to test modifyFeatures
        //instance.modifyFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryFeatures', function() {
      it('should call queryFeatures successfully', function(done) {
        //uncomment below and update the code to test queryFeatures
        //instance.queryFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truncate', function() {
      it('should call truncate successfully', function(done) {
        //uncomment below and update the code to test truncate
        //instance.truncate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSchema', function() {
      it('should call updateSchema successfully', function(done) {
        //uncomment below and update the code to test updateSchema
        //instance.updateSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
