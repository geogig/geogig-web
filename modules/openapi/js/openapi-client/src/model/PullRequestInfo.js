/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RepositoryInfo', 'model/UserInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RepositoryInfo'), require('./UserInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.PullRequestInfo = factory(root.Geogig.ApiClient, root.Geogig.RepositoryInfo, root.Geogig.UserInfo);
  }
}(this, function(ApiClient, RepositoryInfo, UserInfo) {
  'use strict';




  /**
   * The PullRequestInfo model module.
   * @module model/PullRequestInfo
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new <code>PullRequestInfo</code>.
   * @alias module:model/PullRequestInfo
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>PullRequestInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PullRequestInfo} obj Optional instance to populate.
   * @return {module:model/PullRequestInfo} The populated <code>PullRequestInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('sourceBranch')) {
        obj['sourceBranch'] = ApiClient.convertToType(data['sourceBranch'], 'String');
      }
      if (data.hasOwnProperty('targetBranch')) {
        obj['targetBranch'] = ApiClient.convertToType(data['targetBranch'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('mergeable')) {
        obj['mergeable'] = ApiClient.convertToType(data['mergeable'], 'String');
      }
      if (data.hasOwnProperty('merge_commit')) {
        obj['merge_commit'] = ApiClient.convertToType(data['merge_commit'], 'String');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('updated_at')) {
        obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
      }
      if (data.hasOwnProperty('closed_at')) {
        obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
      }
      if (data.hasOwnProperty('createdBy')) {
        obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
      }
      if (data.hasOwnProperty('closedBy')) {
        obj['closedBy'] = UserInfo.constructFromObject(data['closedBy']);
      }
      if (data.hasOwnProperty('sourceRepo')) {
        obj['sourceRepo'] = RepositoryInfo.constructFromObject(data['sourceRepo']);
      }
      if (data.hasOwnProperty('targetRepo')) {
        obj['targetRepo'] = RepositoryInfo.constructFromObject(data['targetRepo']);
      }
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {String} sourceBranch
   */
  exports.prototype['sourceBranch'] = undefined;
  /**
   * @member {String} targetBranch
   */
  exports.prototype['targetBranch'] = undefined;
  /**
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {module:model/PullRequestInfo.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {module:model/PullRequestInfo.MergeableEnum} mergeable
   */
  exports.prototype['mergeable'] = undefined;
  /**
   * @member {String} merge_commit
   */
  exports.prototype['merge_commit'] = undefined;
  /**
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * @member {Date} updated_at
   */
  exports.prototype['updated_at'] = undefined;
  /**
   * @member {Date} closed_at
   */
  exports.prototype['closed_at'] = undefined;
  /**
   * @member {module:model/UserInfo} createdBy
   */
  exports.prototype['createdBy'] = undefined;
  /**
   * @member {module:model/UserInfo} closedBy
   */
  exports.prototype['closedBy'] = undefined;
  /**
   * @member {module:model/RepositoryInfo} sourceRepo
   */
  exports.prototype['sourceRepo'] = undefined;
  /**
   * @member {module:model/RepositoryInfo} targetRepo
   */
  exports.prototype['targetRepo'] = undefined;


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",
    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED",
    /**
     * value: "MERGED"
     * @const
     */
    "MERGED": "MERGED"  };

  /**
   * Allowed values for the <code>mergeable</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MergeableEnum = {
    /**
     * value: "MERGEABLE"
     * @const
     */
    "MERGEABLE": "MERGEABLE",
    /**
     * value: "UNMERGEABLE"
     * @const
     */
    "UNMERGEABLE": "UNMERGEABLE",
    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"  };


  return exports;
}));


