/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SRS', 'model/ValueType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SRS'), require('./ValueType'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.SimplePropertyDescriptor = factory(root.Geogig.ApiClient, root.Geogig.SRS, root.Geogig.ValueType);
  }
}(this, function(ApiClient, SRS, ValueType) {
  'use strict';




  /**
   * The SimplePropertyDescriptor model module.
   * @module model/SimplePropertyDescriptor
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new <code>SimplePropertyDescriptor</code>.
   * @alias module:model/SimplePropertyDescriptor
   * @class
   * @param name {String} 
   * @param binding {module:model/ValueType} 
   */
  var exports = function(name, binding) {
    var _this = this;

    _this['name'] = name;
    _this['binding'] = binding;


  };

  /**
   * Constructs a <code>SimplePropertyDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SimplePropertyDescriptor} obj Optional instance to populate.
   * @return {module:model/SimplePropertyDescriptor} The populated <code>SimplePropertyDescriptor</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('binding')) {
        obj['binding'] = ValueType.constructFromObject(data['binding']);
      }
      if (data.hasOwnProperty('nillable')) {
        obj['nillable'] = ApiClient.convertToType(data['nillable'], 'Boolean');
      }
      if (data.hasOwnProperty('crs')) {
        obj['crs'] = SRS.constructFromObject(data['crs']);
      }
    }
    return obj;
  }

  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/ValueType} binding
   */
  exports.prototype['binding'] = undefined;
  /**
   * Flag indicating if <null> is an allowable value for the property
   * @member {Boolean} nillable
   */
  exports.prototype['nillable'] = undefined;
  /**
   * @member {module:model/SRS} crs
   */
  exports.prototype['crs'] = undefined;



  return exports;
}));


