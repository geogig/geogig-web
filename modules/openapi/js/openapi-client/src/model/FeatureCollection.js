/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Feature', 'model/RevisionFeatureType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Feature'), require('./RevisionFeatureType'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.FeatureCollection = factory(root.Geogig.ApiClient, root.Geogig.Feature, root.Geogig.RevisionFeatureType);
  }
}(this, function(ApiClient, Feature, RevisionFeatureType) {
  'use strict';




  /**
   * The FeatureCollection model module.
   * @module model/FeatureCollection
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new <code>FeatureCollection</code>.
   * @alias module:model/FeatureCollection
   * @class
   * @extends module:model/Feature
   */
  var exports = function() {
    var _this = this;
    Feature.call(_this);
  };

  /**
   * Constructs a <code>FeatureCollection</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FeatureCollection} obj Optional instance to populate.
   * @return {module:model/FeatureCollection} The populated <code>FeatureCollection</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      Feature.constructFromObject(data, obj);
    }
    return obj;
  }

  exports.prototype = Object.create(Feature.prototype);
  exports.prototype.constructor = exports;




  return exports;
}));


