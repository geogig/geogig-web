/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTaskInfo', 'model/BoundingBox', 'model/BranchInfo', 'model/Coordinate', 'model/Error', 'model/Feature', 'model/FeatureFilter', 'model/FeatureQuery', 'model/IdentifiedObject', 'model/LayerInfo', 'model/LayerSummary', 'model/ObjectHash', 'model/ObjectType', 'model/OriginInfo', 'model/Person', 'model/ProgressInfo', 'model/PullRequestInfo', 'model/PullRequestRequest', 'model/Ref', 'model/RefMap', 'model/RepoLayerSummary', 'model/RequestRequestPatch', 'model/RevisionObject', 'model/SRS', 'model/SimplePropertyDescriptor', 'model/StoreConnectionInfo', 'model/TaskResult', 'model/TransactionInfo', 'model/TransactionStatus', 'model/TreeBucket', 'model/TreeNode', 'model/UpdateFeaturesRequest', 'model/UserInfoPrivateProfile', 'model/UserInfoPublicProfile', 'model/UserLayerSummary', 'model/UserType', 'model/Value', 'model/ValueType', 'model/VersionInfo', 'model/FeatureCollection', 'model/FileStoreInfo', 'model/PostgresStoreInfo', 'model/RepositoryInfo', 'model/RevisionCommit', 'model/RevisionFeature', 'model/RevisionFeatureType', 'model/RevisionTag', 'model/RevisionTree', 'model/StoreInfo', 'model/UserInfo', 'api/AsyncApi', 'api/CollaborationApi', 'api/FeatureServiceApi', 'api/RawRepositoryAccessApi', 'api/RepositoryManagementApi', 'api/RepositoryStoresApi', 'api/ServiceInfoApi', 'api/TransactionManagementApi', 'api/UsersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AsyncTaskInfo'), require('./model/BoundingBox'), require('./model/BranchInfo'), require('./model/Coordinate'), require('./model/Error'), require('./model/Feature'), require('./model/FeatureFilter'), require('./model/FeatureQuery'), require('./model/IdentifiedObject'), require('./model/LayerInfo'), require('./model/LayerSummary'), require('./model/ObjectHash'), require('./model/ObjectType'), require('./model/OriginInfo'), require('./model/Person'), require('./model/ProgressInfo'), require('./model/PullRequestInfo'), require('./model/PullRequestRequest'), require('./model/Ref'), require('./model/RefMap'), require('./model/RepoLayerSummary'), require('./model/RequestRequestPatch'), require('./model/RevisionObject'), require('./model/SRS'), require('./model/SimplePropertyDescriptor'), require('./model/StoreConnectionInfo'), require('./model/TaskResult'), require('./model/TransactionInfo'), require('./model/TransactionStatus'), require('./model/TreeBucket'), require('./model/TreeNode'), require('./model/UpdateFeaturesRequest'), require('./model/UserInfoPrivateProfile'), require('./model/UserInfoPublicProfile'), require('./model/UserLayerSummary'), require('./model/UserType'), require('./model/Value'), require('./model/ValueType'), require('./model/VersionInfo'), require('./model/FeatureCollection'), require('./model/FileStoreInfo'), require('./model/PostgresStoreInfo'), require('./model/RepositoryInfo'), require('./model/RevisionCommit'), require('./model/RevisionFeature'), require('./model/RevisionFeatureType'), require('./model/RevisionTag'), require('./model/RevisionTree'), require('./model/StoreInfo'), require('./model/UserInfo'), require('./api/AsyncApi'), require('./api/CollaborationApi'), require('./api/FeatureServiceApi'), require('./api/RawRepositoryAccessApi'), require('./api/RepositoryManagementApi'), require('./api/RepositoryStoresApi'), require('./api/ServiceInfoApi'), require('./api/TransactionManagementApi'), require('./api/UsersApi'));
  }
}(function(ApiClient, AsyncTaskInfo, BoundingBox, BranchInfo, Coordinate, Error, Feature, FeatureFilter, FeatureQuery, IdentifiedObject, LayerInfo, LayerSummary, ObjectHash, ObjectType, OriginInfo, Person, ProgressInfo, PullRequestInfo, PullRequestRequest, Ref, RefMap, RepoLayerSummary, RequestRequestPatch, RevisionObject, SRS, SimplePropertyDescriptor, StoreConnectionInfo, TaskResult, TransactionInfo, TransactionStatus, TreeBucket, TreeNode, UpdateFeaturesRequest, UserInfoPrivateProfile, UserInfoPublicProfile, UserLayerSummary, UserType, Value, ValueType, VersionInfo, FeatureCollection, FileStoreInfo, PostgresStoreInfo, RepositoryInfo, RevisionCommit, RevisionFeature, RevisionFeatureType, RevisionTag, RevisionTree, StoreInfo, UserInfo, AsyncApi, CollaborationApi, FeatureServiceApi, RawRepositoryAccessApi, RepositoryManagementApi, RepositoryStoresApi, ServiceInfoApi, TransactionManagementApi, UsersApi) {
  'use strict';

  /**
   * Client library for geogig server.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Geogig = require('index'); // See note below*.
   * var xxxSvc = new Geogig.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Geogig.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Geogig.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Geogig.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.1-SNAPSHOT
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AsyncTaskInfo model constructor.
     * @property {module:model/AsyncTaskInfo}
     */
    AsyncTaskInfo: AsyncTaskInfo,
    /**
     * The BoundingBox model constructor.
     * @property {module:model/BoundingBox}
     */
    BoundingBox: BoundingBox,
    /**
     * The BranchInfo model constructor.
     * @property {module:model/BranchInfo}
     */
    BranchInfo: BranchInfo,
    /**
     * The Coordinate model constructor.
     * @property {module:model/Coordinate}
     */
    Coordinate: Coordinate,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature: Feature,
    /**
     * The FeatureFilter model constructor.
     * @property {module:model/FeatureFilter}
     */
    FeatureFilter: FeatureFilter,
    /**
     * The FeatureQuery model constructor.
     * @property {module:model/FeatureQuery}
     */
    FeatureQuery: FeatureQuery,
    /**
     * The IdentifiedObject model constructor.
     * @property {module:model/IdentifiedObject}
     */
    IdentifiedObject: IdentifiedObject,
    /**
     * The LayerInfo model constructor.
     * @property {module:model/LayerInfo}
     */
    LayerInfo: LayerInfo,
    /**
     * The LayerSummary model constructor.
     * @property {module:model/LayerSummary}
     */
    LayerSummary: LayerSummary,
    /**
     * The ObjectHash model constructor.
     * @property {module:model/ObjectHash}
     */
    ObjectHash: ObjectHash,
    /**
     * The ObjectType model constructor.
     * @property {module:model/ObjectType}
     */
    ObjectType: ObjectType,
    /**
     * The OriginInfo model constructor.
     * @property {module:model/OriginInfo}
     */
    OriginInfo: OriginInfo,
    /**
     * The Person model constructor.
     * @property {module:model/Person}
     */
    Person: Person,
    /**
     * The ProgressInfo model constructor.
     * @property {module:model/ProgressInfo}
     */
    ProgressInfo: ProgressInfo,
    /**
     * The PullRequestInfo model constructor.
     * @property {module:model/PullRequestInfo}
     */
    PullRequestInfo: PullRequestInfo,
    /**
     * The PullRequestRequest model constructor.
     * @property {module:model/PullRequestRequest}
     */
    PullRequestRequest: PullRequestRequest,
    /**
     * The Ref model constructor.
     * @property {module:model/Ref}
     */
    Ref: Ref,
    /**
     * The RefMap model constructor.
     * @property {module:model/RefMap}
     */
    RefMap: RefMap,
    /**
     * The RepoLayerSummary model constructor.
     * @property {module:model/RepoLayerSummary}
     */
    RepoLayerSummary: RepoLayerSummary,
    /**
     * The RequestRequestPatch model constructor.
     * @property {module:model/RequestRequestPatch}
     */
    RequestRequestPatch: RequestRequestPatch,
    /**
     * The RevisionObject model constructor.
     * @property {module:model/RevisionObject}
     */
    RevisionObject: RevisionObject,
    /**
     * The SRS model constructor.
     * @property {module:model/SRS}
     */
    SRS: SRS,
    /**
     * The SimplePropertyDescriptor model constructor.
     * @property {module:model/SimplePropertyDescriptor}
     */
    SimplePropertyDescriptor: SimplePropertyDescriptor,
    /**
     * The StoreConnectionInfo model constructor.
     * @property {module:model/StoreConnectionInfo}
     */
    StoreConnectionInfo: StoreConnectionInfo,
    /**
     * The TaskResult model constructor.
     * @property {module:model/TaskResult}
     */
    TaskResult: TaskResult,
    /**
     * The TransactionInfo model constructor.
     * @property {module:model/TransactionInfo}
     */
    TransactionInfo: TransactionInfo,
    /**
     * The TransactionStatus model constructor.
     * @property {module:model/TransactionStatus}
     */
    TransactionStatus: TransactionStatus,
    /**
     * The TreeBucket model constructor.
     * @property {module:model/TreeBucket}
     */
    TreeBucket: TreeBucket,
    /**
     * The TreeNode model constructor.
     * @property {module:model/TreeNode}
     */
    TreeNode: TreeNode,
    /**
     * The UpdateFeaturesRequest model constructor.
     * @property {module:model/UpdateFeaturesRequest}
     */
    UpdateFeaturesRequest: UpdateFeaturesRequest,
    /**
     * The UserInfoPrivateProfile model constructor.
     * @property {module:model/UserInfoPrivateProfile}
     */
    UserInfoPrivateProfile: UserInfoPrivateProfile,
    /**
     * The UserInfoPublicProfile model constructor.
     * @property {module:model/UserInfoPublicProfile}
     */
    UserInfoPublicProfile: UserInfoPublicProfile,
    /**
     * The UserLayerSummary model constructor.
     * @property {module:model/UserLayerSummary}
     */
    UserLayerSummary: UserLayerSummary,
    /**
     * The UserType model constructor.
     * @property {module:model/UserType}
     */
    UserType: UserType,
    /**
     * The Value model constructor.
     * @property {module:model/Value}
     */
    Value: Value,
    /**
     * The ValueType model constructor.
     * @property {module:model/ValueType}
     */
    ValueType: ValueType,
    /**
     * The VersionInfo model constructor.
     * @property {module:model/VersionInfo}
     */
    VersionInfo: VersionInfo,
    /**
     * The FeatureCollection model constructor.
     * @property {module:model/FeatureCollection}
     */
    FeatureCollection: FeatureCollection,
    /**
     * The FileStoreInfo model constructor.
     * @property {module:model/FileStoreInfo}
     */
    FileStoreInfo: FileStoreInfo,
    /**
     * The PostgresStoreInfo model constructor.
     * @property {module:model/PostgresStoreInfo}
     */
    PostgresStoreInfo: PostgresStoreInfo,
    /**
     * The RepositoryInfo model constructor.
     * @property {module:model/RepositoryInfo}
     */
    RepositoryInfo: RepositoryInfo,
    /**
     * The RevisionCommit model constructor.
     * @property {module:model/RevisionCommit}
     */
    RevisionCommit: RevisionCommit,
    /**
     * The RevisionFeature model constructor.
     * @property {module:model/RevisionFeature}
     */
    RevisionFeature: RevisionFeature,
    /**
     * The RevisionFeatureType model constructor.
     * @property {module:model/RevisionFeatureType}
     */
    RevisionFeatureType: RevisionFeatureType,
    /**
     * The RevisionTag model constructor.
     * @property {module:model/RevisionTag}
     */
    RevisionTag: RevisionTag,
    /**
     * The RevisionTree model constructor.
     * @property {module:model/RevisionTree}
     */
    RevisionTree: RevisionTree,
    /**
     * The StoreInfo model constructor.
     * @property {module:model/StoreInfo}
     */
    StoreInfo: StoreInfo,
    /**
     * The UserInfo model constructor.
     * @property {module:model/UserInfo}
     */
    UserInfo: UserInfo,
    /**
     * The AsyncApi service constructor.
     * @property {module:api/AsyncApi}
     */
    AsyncApi: AsyncApi,
    /**
     * The CollaborationApi service constructor.
     * @property {module:api/CollaborationApi}
     */
    CollaborationApi: CollaborationApi,
    /**
     * The FeatureServiceApi service constructor.
     * @property {module:api/FeatureServiceApi}
     */
    FeatureServiceApi: FeatureServiceApi,
    /**
     * The RawRepositoryAccessApi service constructor.
     * @property {module:api/RawRepositoryAccessApi}
     */
    RawRepositoryAccessApi: RawRepositoryAccessApi,
    /**
     * The RepositoryManagementApi service constructor.
     * @property {module:api/RepositoryManagementApi}
     */
    RepositoryManagementApi: RepositoryManagementApi,
    /**
     * The RepositoryStoresApi service constructor.
     * @property {module:api/RepositoryStoresApi}
     */
    RepositoryStoresApi: RepositoryStoresApi,
    /**
     * The ServiceInfoApi service constructor.
     * @property {module:api/ServiceInfoApi}
     */
    ServiceInfoApi: ServiceInfoApi,
    /**
     * The TransactionManagementApi service constructor.
     * @property {module:api/TransactionManagementApi}
     */
    TransactionManagementApi: TransactionManagementApi,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi
  };

  return exports;
}));
