/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncTaskInfo', 'model/ProgressInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncTaskInfo'), require('../model/ProgressInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.AsyncApi = factory(root.Geogig.ApiClient, root.Geogig.AsyncTaskInfo, root.Geogig.ProgressInfo);
  }
}(this, function(ApiClient, AsyncTaskInfo, ProgressInfo) {
  'use strict';

  /**
   * Async service.
   * @module api/AsyncApi
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new AsyncApi. 
   * @alias module:api/AsyncApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Abort a running or scheduled task
     * Abort a running or scheduled task. If the task is already finished, the operation has no effect and its current state is returned. If the tasks is not finished, the returned task info status might be either ABORTING or ABORTED
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskInfo} and HTTP response
     */
    this.abortTaskWithHttpInfo = function(taskId) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling abortTask");
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/tasks/{taskId}/abort', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Abort a running or scheduled task
     * Abort a running or scheduled task. If the task is already finished, the operation has no effect and its current state is returned. If the tasks is not finished, the returned task info status might be either ABORTING or ABORTED
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskInfo}
     */
    this.abortTask = function(taskId) {
      return this.abortTaskWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Commit transaction. Async operation.
     * When committing a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.messageTitle A short (no more than 100 characters) title to summarize the reason this commit is being made
     * @param {String} opts.messageDescription A possibly larger, even spanning multiple paragraphs, description of the reason this commit is applied.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskInfo} and HTTP response
     */
    this.commitTransactionWithHttpInfo = function(user, repo, transactionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling commitTransaction");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling commitTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling commitTransaction");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'messageTitle': opts['messageTitle'],
        'messageDescription': opts['messageDescription']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}/{transactionId}/commit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Commit transaction. Async operation.
     * When committing a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.messageTitle A short (no more than 100 characters) title to summarize the reason this commit is being made
     * @param {String} opts.messageDescription A possibly larger, even spanning multiple paragraphs, description of the reason this commit is applied.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskInfo}
     */
    this.commitTransaction = function(user, repo, transactionId, opts) {
      return this.commitTransactionWithHttpInfo(user, repo, transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fork this repository. Async operation.
     * Forks this repository asynchronously to the authenticated user&#39;s account. Forking is the same than cloning but the term is used in this context to differentiate cloning to any allowed remote URI vs creating clone of this repository inside this server.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.forkName Optional name for the forked repository under the authenticated user&#39;s account. If not provided defaults to the source repository name
     * @param {String} opts.targetStore Name of the repository store writable to the authenticated user to fork this repo to. If not provided, the current user&#39;s default store is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskInfo} and HTTP response
     */
    this.forkRepositoryWithHttpInfo = function(user, repo, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling forkRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling forkRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
        'forkName': opts['forkName'],
        'targetStore': opts['targetStore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/forks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fork this repository. Async operation.
     * Forks this repository asynchronously to the authenticated user&#39;s account. Forking is the same than cloning but the term is used in this context to differentiate cloning to any allowed remote URI vs creating clone of this repository inside this server.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.forkName Optional name for the forked repository under the authenticated user&#39;s account. If not provided defaults to the source repository name
     * @param {String} opts.targetStore Name of the repository store writable to the authenticated user to fork this repo to. If not provided, the current user&#39;s default store is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskInfo}
     */
    this.forkRepository = function(user, repo, opts) {
      return this.forkRepositoryWithHttpInfo(user, repo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Access status info for a given task
     * @param {String} taskId Async task identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.prune If provided and true, the task information is pruned (deleted) if the operation is complete (either successfully or not)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncTaskInfo} and HTTP response
     */
    this.getTaskInfoWithHttpInfo = function(taskId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskInfo");
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
        'prune': opts['prune'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Access status info for a given task
     * @param {String} taskId Async task identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.prune If provided and true, the task information is pruned (deleted) if the operation is complete (either successfully or not)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncTaskInfo}
     */
    this.getTaskInfo = function(taskId, opts) {
      return this.getTaskInfoWithHttpInfo(taskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get task progress info
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgressInfo} and HTTP response
     */
    this.getTaskProgressWithHttpInfo = function(taskId) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskProgress");
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = ProgressInfo;

      return this.apiClient.callApi(
        '/tasks/{taskId}/progress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get task progress info
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgressInfo}
     */
    this.getTaskProgress = function(taskId) {
      return this.getTaskProgressWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List summary information for current asynchronous tasks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AsyncTaskInfo>} and HTTP response
     */
    this.listTasksWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [AsyncTaskInfo];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List summary information for current asynchronous tasks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AsyncTaskInfo>}
     */
    this.listTasks = function() {
      return this.listTasksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Prune a task if finished
     * If the task is finished, then deletes its information, fail otherwise
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pruneTaskWithHttpInfo = function(taskId) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling pruneTask");
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Prune a task if finished
     * If the task is finished, then deletes its information, fail otherwise
     * @param {String} taskId Async task identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pruneTask = function(taskId) {
      return this.pruneTaskWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
