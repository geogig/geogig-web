/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BranchInfo', 'model/ObjectHash', 'model/PullRequestInfo', 'model/PullRequestRequest', 'model/RequestRequestPatch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BranchInfo'), require('../model/ObjectHash'), require('../model/PullRequestInfo'), require('../model/PullRequestRequest'), require('../model/RequestRequestPatch'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.CollaborationApi = factory(root.Geogig.ApiClient, root.Geogig.BranchInfo, root.Geogig.ObjectHash, root.Geogig.PullRequestInfo, root.Geogig.PullRequestRequest, root.Geogig.RequestRequestPatch);
  }
}(this, function(ApiClient, BranchInfo, ObjectHash, PullRequestInfo, PullRequestRequest, RequestRequestPatch) {
  'use strict';

  /**
   * Collaboration service.
   * @module api/CollaborationApi
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new CollaborationApi. 
   * @alias module:api/CollaborationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Checkout this branch
     * Checkout this branch, making it the current branch in the repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BranchInfo} and HTTP response
     */
    this.checkoutWithHttpInfo = function(user, repo, branch, geogigTransactionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling checkout");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling checkout");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling checkout");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling checkout");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}/checkout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Checkout this branch
     * Checkout this branch, making it the current branch in the repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BranchInfo}
     */
    this.checkout = function(user, repo, branch, geogigTransactionId, opts) {
      return this.checkoutWithHttpInfo(user, repo, branch, geogigTransactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {String} commitish Origin commit-ish string where to create the branch from. Can be another branche&#39;s name, a commit sha id, or any other string that rev-parse resolves to a commit (e.g. HEAD~2, refs/heads/branchname, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.description Optional short description specifying the purpose of the branch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BranchInfo} and HTTP response
     */
    this.createBranchWithHttpInfo = function(user, repo, branch, commitish, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling createBranch");
      }

      // verify the required parameter 'commitish' is set
      if (commitish === undefined || commitish === null) {
        throw new Error("Missing the required parameter 'commitish' when calling createBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
        'commitish': commitish,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId'],
        'description': opts['description']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {String} commitish Origin commit-ish string where to create the branch from. Can be another branche&#39;s name, a commit sha id, or any other string that rev-parse resolves to a commit (e.g. HEAD~2, refs/heads/branchname, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.description Optional short description specifying the purpose of the branch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BranchInfo}
     */
    this.createBranch = function(user, repo, branch, commitish, opts) {
      return this.createBranchWithHttpInfo(user, repo, branch, commitish, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:model/PullRequestRequest} pullRequestRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PullRequestInfo} and HTTP response
     */
    this.createPullRequestWithHttpInfo = function(user, repo, pullRequestRequest) {
      var postBody = pullRequestRequest;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createPullRequest");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createPullRequest");
      }

      // verify the required parameter 'pullRequestRequest' is set
      if (pullRequestRequest === undefined || pullRequestRequest === null) {
        throw new Error("Missing the required parameter 'pullRequestRequest' when calling createPullRequest");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = PullRequestInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:model/PullRequestRequest} pullRequestRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PullRequestInfo}
     */
    this.createPullRequest = function(user, repo, pullRequestRequest) {
      return this.createPullRequestWithHttpInfo(user, repo, pullRequestRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteBranchWithHttpInfo = function(user, repo, branch, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling deleteBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBranch = function(user, repo, branch, opts) {
      return this.deleteBranchWithHttpInfo(user, repo, branch, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BranchInfo} and HTTP response
     */
    this.getBranchWithHttpInfo = function(user, repo, branch, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BranchInfo}
     */
    this.getBranch = function(user, repo, branch, opts) {
      return this.getBranchWithHttpInfo(user, repo, branch, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the currently checked out branch, optionally indicating a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BranchInfo} and HTTP response
     */
    this.getCurrentBranchWithHttpInfo = function(user, repo, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getCurrentBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCurrentBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branch', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the currently checked out branch, optionally indicating a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BranchInfo}
     */
    this.getCurrentBranch = function(user, repo, opts) {
      return this.getCurrentBranchWithHttpInfo(user, repo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific pull request of this repo by id
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PullRequestInfo} and HTTP response
     */
    this.getPullRequestWithHttpInfo = function(user, repo, pr) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getPullRequest");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getPullRequest");
      }

      // verify the required parameter 'pr' is set
      if (pr === undefined || pr === null) {
        throw new Error("Missing the required parameter 'pr' when calling getPullRequest");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'pr': pr
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = PullRequestInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls/{pr}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific pull request of this repo by id
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PullRequestInfo}
     */
    this.getPullRequest = function(user, repo, pr) {
      return this.getPullRequestWithHttpInfo(user, repo, pr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check on the merged status of the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Boolean'} and HTTP response
     */
    this.isPullRequestMergedWithHttpInfo = function(user, repo, pr) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling isPullRequestMerged");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling isPullRequestMerged");
      }

      // verify the required parameter 'pr' is set
      if (pr === undefined || pr === null) {
        throw new Error("Missing the required parameter 'pr' when calling isPullRequestMerged");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'pr': pr
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls/{pr}/merge', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check on the merged status of the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Boolean'}
     */
    this.isPullRequestMerged = function(user, repo, pr) {
      return this.isPullRequestMergedWithHttpInfo(user, repo, pr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all branches in the current repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BranchInfo>} and HTTP response
     */
    this.listBranchesWithHttpInfo = function(user, repo, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listBranches");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listBranches");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [BranchInfo];

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all branches in the current repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BranchInfo>}
     */
    this.listBranches = function(user, repo, opts) {
      return this.listBranchesWithHttpInfo(user, repo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List pull requests issued to this repo
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.open  (default to true)
     * @param {Boolean} opts.closed  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PullRequestInfo>} and HTTP response
     */
    this.listPullRequestsWithHttpInfo = function(user, repo, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listPullRequests");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listPullRequests");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
        'open': opts['open'],
        'closed': opts['closed'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [PullRequestInfo];

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List pull requests issued to this repo
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.open  (default to true)
     * @param {Boolean} opts.closed  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PullRequestInfo>}
     */
    this.listPullRequests = function(user, repo, opts) {
      return this.listPullRequestsWithHttpInfo(user, repo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Merge the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitTitle Short, single line, title for the automatic commit message
     * @param {String} opts.commitMessage Extra detail to append to automatic commit message, possibly encompassing multiple paragraphs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectHash} and HTTP response
     */
    this.mergePullRequestWithHttpInfo = function(user, repo, pr, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling mergePullRequest");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling mergePullRequest");
      }

      // verify the required parameter 'pr' is set
      if (pr === undefined || pr === null) {
        throw new Error("Missing the required parameter 'pr' when calling mergePullRequest");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'pr': pr
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'commit_title': opts['commitTitle'],
        'commit_message': opts['commitMessage']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = ObjectHash;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls/{pr}/merge', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Merge the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitTitle Short, single line, title for the automatic commit message
     * @param {String} opts.commitMessage Extra detail to append to automatic commit message, possibly encompassing multiple paragraphs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectHash}
     */
    this.mergePullRequest = function(user, repo, pr, opts) {
      return this.mergePullRequestWithHttpInfo(user, repo, pr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the title, description, open status, or target branch of the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @param {module:model/RequestRequestPatch} requestRequestPatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PullRequestInfo} and HTTP response
     */
    this.updatePullRequestWithHttpInfo = function(user, repo, pr, requestRequestPatch) {
      var postBody = requestRequestPatch;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updatePullRequest");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling updatePullRequest");
      }

      // verify the required parameter 'pr' is set
      if (pr === undefined || pr === null) {
        throw new Error("Missing the required parameter 'pr' when calling updatePullRequest");
      }

      // verify the required parameter 'requestRequestPatch' is set
      if (requestRequestPatch === undefined || requestRequestPatch === null) {
        throw new Error("Missing the required parameter 'requestRequestPatch' when calling updatePullRequest");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'pr': pr
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = PullRequestInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/pulls/{pr}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change the title, description, open status, or target branch of the pull request
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Number} pr Pull request identifier
     * @param {module:model/RequestRequestPatch} requestRequestPatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PullRequestInfo}
     */
    this.updatePullRequest = function(user, repo, pr, requestRequestPatch) {
      return this.updatePullRequestWithHttpInfo(user, repo, pr, requestRequestPatch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
