/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/RepositoryInfo', 'model/StoreInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/RepositoryInfo'), require('../model/StoreInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.RepositoryStoresApi = factory(root.Geogig.ApiClient, root.Geogig.Error, root.Geogig.RepositoryInfo, root.Geogig.StoreInfo);
  }
}(this, function(ApiClient, Error, RepositoryInfo, StoreInfo) {
  'use strict';

  /**
   * RepositoryStores service.
   * @module api/RepositoryStoresApi
   * @version 0.1-SNAPSHOT
   */

  /**
   * Constructs a new RepositoryStoresApi. 
   * @alias module:api/RepositoryStoresApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Return the number of repositories held on this store
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.countStoreReposWithHttpInfo = function(store) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling countStoreRepos");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/stores/{store}/repos/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return the number of repositories held on this store
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.countStoreRepos = function(store) {
      return this.countStoreReposWithHttpInfo(store)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new repository store
     * @param {module:model/StoreInfo} storeInfo The repository to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreInfo} and HTTP response
     */
    this.createStoreWithHttpInfo = function(storeInfo) {
      var postBody = storeInfo;

      // verify the required parameter 'storeInfo' is set
      if (storeInfo === undefined || storeInfo === null) {
        throw new Error("Missing the required parameter 'storeInfo' when calling createStore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new repository store
     * @param {module:model/StoreInfo} storeInfo The repository to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreInfo}
     */
    this.createStore = function(storeInfo) {
      return this.createStoreWithHttpInfo(storeInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get repository store info by name
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreInfo} and HTTP response
     */
    this.getStoreWithHttpInfo = function(store) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling getStore");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores/{store}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get repository store info by name
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreInfo}
     */
    this.getStore = function(store) {
      return this.getStoreWithHttpInfo(store)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List summary information for available collections of repositories. Only stores visible to the current user are listed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StoreInfo>} and HTTP response
     */
    this.getStoresWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [StoreInfo];

      return this.apiClient.callApi(
        '/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List summary information for available collections of repositories. Only stores visible to the current user are listed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StoreInfo>}
     */
    this.getStores = function() {
      return this.getStoresWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List summary information for all repositories on this repository store
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RepositoryInfo>} and HTTP response
     */
    this.listStoreReposWithHttpInfo = function(store) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling listStoreRepos");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [RepositoryInfo];

      return this.apiClient.callApi(
        '/stores/{store}/repos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List summary information for all repositories on this repository store
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RepositoryInfo>}
     */
    this.listStoreRepos = function(store) {
      return this.listStoreReposWithHttpInfo(store)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update repository info
     * Updates a repository store
     * @param {module:model/StoreInfo} storeInfo The repository to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoreInfo} and HTTP response
     */
    this.modifyStoreWithHttpInfo = function(storeInfo) {
      var postBody = storeInfo;

      // verify the required parameter 'storeInfo' is set
      if (storeInfo === undefined || storeInfo === null) {
        throw new Error("Missing the required parameter 'storeInfo' when calling modifyStore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update repository info
     * Updates a repository store
     * @param {module:model/StoreInfo} storeInfo The repository to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoreInfo}
     */
    this.modifyStore = function(storeInfo) {
      return this.modifyStoreWithHttpInfo(storeInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the repository store configuration (disables all repositories on it)
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeStoreWithHttpInfo = function(store) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling removeStore");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/stores/{store}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove the repository store configuration (disables all repositories on it)
     * @param {String} store Name of the repository store.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeStore = function(store) {
      return this.removeStoreWithHttpInfo(store)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
