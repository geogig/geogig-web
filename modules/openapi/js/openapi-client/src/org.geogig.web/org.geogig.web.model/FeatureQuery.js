/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/FeatureFilter', 'org.geogig.web/org.geogig.web.model/SRS'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FeatureFilter'), require('./SRS'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.FeatureQuery = factory(root.Geogig.ApiClient, root.Geogig.FeatureFilter, root.Geogig.SRS);
  }
}(this, function(ApiClient, FeatureFilter, SRS) {
  'use strict';




  /**
   * The FeatureQuery model module.
   * @module org.geogig.web/org.geogig.web.model/FeatureQuery
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new <code>FeatureQuery</code>.
   * @alias module:org.geogig.web/org.geogig.web.model/FeatureQuery
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>FeatureQuery</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:org.geogig.web/org.geogig.web.model/FeatureQuery} obj Optional instance to populate.
   * @return {module:org.geogig.web/org.geogig.web.model/FeatureQuery} The populated <code>FeatureQuery</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('head')) {
        obj['head'] = ApiClient.convertToType(data['head'], 'String');
      }
      if (data.hasOwnProperty('attributes')) {
        obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
      }
      if (data.hasOwnProperty('filter')) {
        obj['filter'] = FeatureFilter.constructFromObject(data['filter']);
      }
      if (data.hasOwnProperty('resultType')) {
        obj['resultType'] = ApiClient.convertToType(data['resultType'], 'String');
      }
      if (data.hasOwnProperty('outputCrs')) {
        obj['outputCrs'] = SRS.constructFromObject(data['outputCrs']);
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
      }
      if (data.hasOwnProperty('limit')) {
        obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
      }
      if (data.hasOwnProperty('precision')) {
        obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
      }
      if (data.hasOwnProperty('simplificationDistance')) {
        obj['simplificationDistance'] = ApiClient.convertToType(data['simplificationDistance'], 'Number');
      }
    }
    return obj;
  }

  /**
   * tree-ish resolving to the root tree to query. Defaults to WORK_HEAD
   * @member {String} head
   * @default 'WORK_HEAD'
   */
  exports.prototype['head'] = 'WORK_HEAD';
  /**
   * @member {Array.<String>} attributes
   */
  exports.prototype['attributes'] = undefined;
  /**
   * @member {module:org.geogig.web/org.geogig.web.model/FeatureFilter} filter
   */
  exports.prototype['filter'] = undefined;
  /**
   * @member {module:org.geogig.web/org.geogig.web.model/FeatureQuery.ResultTypeEnum} resultType
   */
  exports.prototype['resultType'] = undefined;
  /**
   * @member {module:org.geogig.web/org.geogig.web.model/SRS} outputCrs
   */
  exports.prototype['outputCrs'] = undefined;
  /**
   * @member {Number} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * @member {Number} limit
   */
  exports.prototype['limit'] = undefined;
  /**
   * Multiplying factor used to obtain a precise ordinate. For example, in order to round ordinates to 3 significant digits use a value of 1000. A value absent or 0 (zero) means to not apply any rounding on ordinates. The maximum allowed value is 1,000,000,000 for a precision of 9 decimal places, which is the tolerance used by GeoGig to compare coordinate equality
   * @member {Number} precision
   * @default 0
   */
  exports.prototype['precision'] = 0;
  /**
   * Perform non topology preserving geometry generalization with the given tolerance (may return self crossing polygons as result of the generalization)
   * @member {Number} simplificationDistance
   */
  exports.prototype['simplificationDistance'] = undefined;


  /**
   * Allowed values for the <code>resultType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ResultTypeEnum = {
    /**
     * value: "FEATURES"
     * @const
     */
    "FEATURES": "FEATURES",
    /**
     * value: "BOUNDS"
     * @const
     */
    "BOUNDS": "BOUNDS",
    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",
    /**
     * value: "FIDS"
     * @const
     */
    "FIDS": "FIDS"  };


  return exports;
}));


