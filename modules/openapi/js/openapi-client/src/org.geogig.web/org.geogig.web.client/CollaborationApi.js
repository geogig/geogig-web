/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/BranchInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../org.geogig.web.model/BranchInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.CollaborationApi = factory(root.Geogig.ApiClient, root.Geogig.BranchInfo);
  }
}(this, function(ApiClient, BranchInfo) {
  'use strict';

  /**
   * Collaboration service.
   * @module org.geogig.web/org.geogig.web.client/CollaborationApi
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new CollaborationApi. 
   * @alias module:org.geogig.web/org.geogig.web.client/CollaborationApi
   * @class
   * @param {module:org.geogig.web/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:org.geogig.web/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBranch operation.
     * @callback module:org.geogig.web/org.geogig.web.client/CollaborationApi~createBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/BranchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {String} commitish Origin commit-ish string where to create the branch from. Can be another branche&#39;s name, a commit sha id, or any other string that rev-parse resolves to a commit (e.g. HEAD~2, refs/heads/branchname, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.description Optional short description specifying the purpose of the branch
     * @param {module:org.geogig.web/org.geogig.web.client/CollaborationApi~createBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/BranchInfo}
     */
    this.createBranch = function(user, repo, branch, commitish, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling createBranch");
      }

      // verify the required parameter 'commitish' is set
      if (commitish === undefined || commitish === null) {
        throw new Error("Missing the required parameter 'commitish' when calling createBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
        'commitish': commitish,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId'],
        'description': opts['description']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBranch operation.
     * @callback module:org.geogig.web/org.geogig.web.client/CollaborationApi~deleteBranchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/CollaborationApi~deleteBranchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBranch = function(user, repo, branch, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling deleteBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBranch operation.
     * @callback module:org.geogig.web/org.geogig.web.client/CollaborationApi~getBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/BranchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a branch by name
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} branch branch name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/CollaborationApi~getBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/BranchInfo}
     */
    this.getBranch = function(user, repo, branch, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'branch': branch
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches/{branch}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentBranch operation.
     * @callback module:org.geogig.web/org.geogig.web.client/CollaborationApi~getCurrentBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/BranchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the currently checked out branch, optionally indicating a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/CollaborationApi~getCurrentBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/BranchInfo}
     */
    this.getCurrentBranch = function(user, repo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getCurrentBranch");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCurrentBranch");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BranchInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branch', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBranches operation.
     * @callback module:org.geogig.web/org.geogig.web.client/CollaborationApi~listBranchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/BranchInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all branches in the current repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/CollaborationApi~listBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/BranchInfo>}
     */
    this.listBranches = function(user, repo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listBranches");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listBranches");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [BranchInfo];

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/branches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
