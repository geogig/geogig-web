/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/AsyncTaskInfo', 'org.geogig.web/org.geogig.web.model/RepositoryInfo', 'org.geogig.web/org.geogig.web.model/UserInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../org.geogig.web.model/AsyncTaskInfo'), require('../org.geogig.web.model/RepositoryInfo'), require('../org.geogig.web.model/UserInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.RepositoryManagementApi = factory(root.Geogig.ApiClient, root.Geogig.AsyncTaskInfo, root.Geogig.RepositoryInfo, root.Geogig.UserInfo);
  }
}(this, function(ApiClient, AsyncTaskInfo, RepositoryInfo, UserInfo) {
  'use strict';

  /**
   * RepositoryManagement service.
   * @module org.geogig.web/org.geogig.web.client/RepositoryManagementApi
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new RepositoryManagementApi. 
   * @alias module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi
   * @class
   * @param {module:org.geogig.web/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:org.geogig.web/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the countWatchers operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~countWatchersCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number of users watching this repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~countWatchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countWatchers = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling countWatchers");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling countWatchers");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/watchers/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~createRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RepositoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new repository
     * Create a new repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.targetStore Optionally, the name of the target store where to save the repo. Defaults to the owner&#39;s default store.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~createRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RepositoryInfo}
     */
    this.createRepository = function(user, repo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
        'targetStore': opts['targetStore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RepositoryInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete repository
     * Deletes the repository addressed by the request path
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRepository = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forkRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~forkRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/AsyncTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork this repository. Async operation.
     * Forks this repository asynchronously to the authenticated user&#39;s account. Forking is the same than cloning but the term is used in this context to differentiate cloning to any allowed remote URI vs creating clone of this repository inside this server.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.forkName Optional name for the forked repository under the authenticated user&#39;s account. If not provided defaults to the source repository name
     * @param {String} opts.targetStore Name of the repository store writable to the authenticated user to fork this repo to. If not provided, the current user&#39;s default store is used.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~forkRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/AsyncTaskInfo}
     */
    this.forkRepository = function(user, repo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling forkRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling forkRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
        'forkName': opts['forkName'],
        'targetStore': opts['targetStore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/forks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~getRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RepositoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full repository information
     * Obtain a manifest about the current status of the repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~getRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RepositoryInfo}
     */
    this.getRepository = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RepositoryInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listForks operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listForksCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RepositoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories that are forks of this one
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listForksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RepositoryInfo}
     */
    this.listForks = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listForks");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listForks");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RepositoryInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/forks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRepositories operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories summary information
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.topics 
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>}
     */
    this.listRepositories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'topics': {
          value: opts['topics'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [RepositoryInfo];

      return this.apiClient.callApi(
        '/repos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserRepositories operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listUserRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available repositories summary information
     * @param {String} user repository login owner
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listUserRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>}
     */
    this.listUserRepositories = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listUserRepositories");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [RepositoryInfo];

      return this.apiClient.callApi(
        '/repos/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWatchers operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listWatchersCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users watching this repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~listWatchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/UserInfo}
     */
    this.listWatchers = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listWatchers");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listWatchers");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = UserInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/watchers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~modifyRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RepositoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify repository
     * Modify repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.model/RepositoryInfo} repository The new repository settings
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~modifyRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RepositoryInfo}
     */
    this.modifyRepository = function(user, repo, repository, callback) {
      var postBody = repository;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling modifyRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling modifyRepository");
      }

      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling modifyRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RepositoryInfo;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unwatchRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~unwatchRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop watching this repo.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~unwatchRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unwatchRepository = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling unwatchRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling unwatchRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/watchers', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRepository operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~watchRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start watching this repo.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryManagementApi~watchRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.watchRepository = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling watchRepository");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling watchRepository");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/repos/{user}/{repo}/watchers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
