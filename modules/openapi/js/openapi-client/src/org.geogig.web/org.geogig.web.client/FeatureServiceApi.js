/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/BoundingBox', 'org.geogig.web/org.geogig.web.model/Feature', 'org.geogig.web/org.geogig.web.model/FeatureCollection', 'org.geogig.web/org.geogig.web.model/FeatureFilter', 'org.geogig.web/org.geogig.web.model/FeatureQuery', 'org.geogig.web/org.geogig.web.model/LayerInfo', 'org.geogig.web/org.geogig.web.model/ObjectHash', 'org.geogig.web/org.geogig.web.model/RepoLayerSummary', 'org.geogig.web/org.geogig.web.model/RevisionFeatureType', 'org.geogig.web/org.geogig.web.model/UpdateFeaturesRequest', 'org.geogig.web/org.geogig.web.model/UserLayerSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../org.geogig.web.model/BoundingBox'), require('../org.geogig.web.model/Feature'), require('../org.geogig.web.model/FeatureCollection'), require('../org.geogig.web.model/FeatureFilter'), require('../org.geogig.web.model/FeatureQuery'), require('../org.geogig.web.model/LayerInfo'), require('../org.geogig.web.model/ObjectHash'), require('../org.geogig.web.model/RepoLayerSummary'), require('../org.geogig.web.model/RevisionFeatureType'), require('../org.geogig.web.model/UpdateFeaturesRequest'), require('../org.geogig.web.model/UserLayerSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.FeatureServiceApi = factory(root.Geogig.ApiClient, root.Geogig.BoundingBox, root.Geogig.Feature, root.Geogig.FeatureCollection, root.Geogig.FeatureFilter, root.Geogig.FeatureQuery, root.Geogig.LayerInfo, root.Geogig.ObjectHash, root.Geogig.RepoLayerSummary, root.Geogig.RevisionFeatureType, root.Geogig.UpdateFeaturesRequest, root.Geogig.UserLayerSummary);
  }
}(this, function(ApiClient, BoundingBox, Feature, FeatureCollection, FeatureFilter, FeatureQuery, LayerInfo, ObjectHash, RepoLayerSummary, RevisionFeatureType, UpdateFeaturesRequest, UserLayerSummary) {
  'use strict';

  /**
   * FeatureService service.
   * @module org.geogig.web/org.geogig.web.client/FeatureServiceApi
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new FeatureServiceApi. 
   * @alias module:org.geogig.web/org.geogig.web.client/FeatureServiceApi
   * @class
   * @param {module:org.geogig.web/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:org.geogig.web/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFeatures operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~addFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Iserts features to this collection in the WORK_HEAD. Parameter features can be either a Feature or a FeatureCollection.
     * The features are added to the WORK_HEAD tree. This operation works against the currently checked out branch for the indicated transaction, and does not perform a geogig commit on its own. The geogig commit is created either manually or once the geogig transaction is committed.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {Object} opts Optional parameters
     * @param {module:org.geogig.web/org.geogig.web.model/Feature} opts.features 
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~addFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFeatures = function(user, repo, layer, geogigTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['features'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addFeatures");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling addFeatures");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling addFeatures");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling addFeatures");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/vnd.geo+json', 'application/vnd.geo+smile'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLayer operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~createLayerCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/LayerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new layer
     * Creating and populating a new layer are two separate steps. First the layer schema must be created and then the features uploaded.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.model/RevisionFeatureType} featureType FeatureType for the layer
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~createLayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/LayerInfo}
     */
    this.createLayer = function(user, repo, geogigTransactionId, featureType, callback) {
      var postBody = featureType;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createLayer");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling createLayer");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling createLayer");
      }

      // verify the required parameter 'featureType' is set
      if (featureType === undefined || featureType === null) {
        throw new Error("Missing the required parameter 'featureType' when calling createLayer");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = LayerInfo;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeature operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteFeatureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single feature at the current transaction&#39;s branch
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} featureId Feature identifier
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeature = function(user, repo, layer, featureId, geogigTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteFeature");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteFeature");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling deleteFeature");
      }

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling deleteFeature");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling deleteFeature");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer,
        'featureId': featureId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features/{featureId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatures operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete features matching the given query
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {Object} opts Optional parameters
     * @param {module:org.geogig.web/org.geogig.web.model/FeatureFilter} opts.filter 
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeatures = function(user, repo, layer, geogigTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteFeatures");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteFeatures");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling deleteFeatures");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling deleteFeatures");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/rpc/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLayer operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteLayerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Layer from a repository at the current transaction&#39;s branch
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~deleteLayerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLayer = function(user, repo, layer, geogigTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteLayer");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteLayer");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling deleteLayer");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling deleteLayer");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBounds operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getBoundsCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/BoundingBox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get layer bounds at the specified transaction/head. If no head is specified, defaults to WORK_HEAD
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getBoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/BoundingBox}
     */
    this.getBounds = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getBounds");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBounds");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getBounds");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = BoundingBox;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/bounds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeature operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single feature from a layer given its feature id, at the specified transaction/head
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} featureId Feature identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.ifNoneMatch Conditional get, return feature its revision feature hash does not match the provided hash
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/Feature}
     */
    this.getFeature = function(user, repo, layer, featureId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getFeature");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getFeature");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getFeature");
      }

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling getFeature");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer,
        'featureId': featureId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.geo+json', 'application/vnd.geo+smile'];
      var returnType = Feature;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features/{featureId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatures operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/FeatureCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Features from a geogig Layer
     * Obtain a stream of features from a geogig layer at the specified transaction/head
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.bbox Comma separated values for a query bounding box in minx,miny,maxx,maxy format. Example: ?bbox&#x3D;-180,-90,180,90
     * @param {Array.<String>} opts.attributes Ordered list of attribute names to return
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {Number} opts.page Page number to retrive when requesting collections, starts at 1.
     * @param {Number} opts.pageSize number of elements to return in a paging query. If page is specified and pageSize is not, pageSize defaults to 100. If pageSize is specified, page becomes mandatory
     * @param {String} opts.ifNoneMatch Conditional get, return features if the layer tree does not match the provided hash
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/FeatureCollection}
     */
    this.getFeatures = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getFeatures");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getFeatures");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getFeatures");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
        'bbox': {
          value: opts['bbox'],
          collectionFormat: 'csv'
        },
        'attributes': {
          value: opts['attributes'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.geo+json', 'application/vnd.geo+smile', 'application/vnd.geogig.features+json', 'application/vnd.geogig.features+smile'];
      var returnType = FeatureCollection;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayerHash operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayerHashCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/ObjectHash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a unique identifier for the current state of the layer.
     * Get a unique identifier for the current state of the layer. Any change/edit to the layer will change this identifier. This operation can be used to verify whether the layer has changed since the client last accessed it.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayerHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/ObjectHash}
     */
    this.getLayerHash = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getLayerHash");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getLayerHash");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getLayerHash");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ObjectHash;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayerInfo operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/LayerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get layer metadata at the specified transaction/head
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.ifNoneMatch Conditional get, layer info if its revision tree hash does not match the provided hash
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/LayerInfo}
     */
    this.getLayerInfo = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getLayerInfo");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getLayerInfo");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getLayerInfo");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = LayerInfo;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayersSummaries operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayersSummariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/UserLayerSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a summary of layers per user
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getLayersSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/UserLayerSummary>}
     */
    this.getLayersSummaries = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [UserLayerSummary];

      return this.apiClient.callApi(
        '/layers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RevisionFeatureType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Layer schema
     * Get layer&#39;s Feature Type at the specified transaction/head. If no head is specified, defaults to WORK_HEAD
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RevisionFeatureType}
     */
    this.getSchema = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getSchema");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getSchema");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getSchema");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RevisionFeatureType;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/schema', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSize operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getSizeCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get layer&#39;s number of features at the specified transaction/head. If no head is specified, defaults to WORK_HEAD
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.getSize = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getSize");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getSize");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling getSize");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserLayersSummaries operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getUserLayersSummariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/RepoLayerSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a summary of this user&#39;s layers
     * @param {String} user repository login owner
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~getUserLayersSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/RepoLayerSummary>}
     */
    this.getUserLayersSummaries = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUserLayersSummaries");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [RepoLayerSummary];

      return this.apiClient.callApi(
        '/layers/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listLayers operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~listLayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/LayerInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layers in a repo
     * List the available layers in the requested [transaction]/repository/[head]
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {Object} opts Optional parameters
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~listLayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/LayerInfo>}
     */
    this.listLayers = function(user, repo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listLayers");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listLayers");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId'],
        'head': opts['head']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [LayerInfo];

      return this.apiClient.callApi(
        '/layers/{user}/{repo}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyFeature operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~modifyFeatureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a single feature at the current transaction&#39;s branch
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} featureId Feature identifier
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~modifyFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyFeature = function(user, repo, layer, featureId, geogigTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling modifyFeature");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling modifyFeature");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling modifyFeature");
      }

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling modifyFeature");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling modifyFeature");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer,
        'featureId': featureId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/vnd.geo+json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features/{featureId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyFeatures operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~modifyFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies features matching the given query with the given values, in the WORK_HEAD of the currently checked out branch for the indicated transaction
     * The features are looked up and modifies in current  WORK_HEAD tree. This operation works against the currently checked out branch for the indicated transaction, and does not perform a geogig commit on its own. The geogig commit is created either manually or once the geogig transaction is committed.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {Object} opts Optional parameters
     * @param {module:org.geogig.web/org.geogig.web.model/UpdateFeaturesRequest} opts.query 
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~modifyFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyFeatures = function(user, repo, layer, geogigTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling modifyFeatures");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling modifyFeatures");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling modifyFeatures");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling modifyFeatures");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/rpc/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryFeatures operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~queryFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/FeatureCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query and return features of this layer tha match the specified FeatureQuery
     * The features are looked up WORK_HEAD tree unless the head parameter has been provided.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {Object} opts Optional parameters
     * @param {module:org.geogig.web/org.geogig.web.model/FeatureQuery} opts.query 
     * @param {String} opts.geogigTransactionId Optional transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~queryFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/FeatureCollection}
     */
    this.queryFeatures = function(user, repo, layer, opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling queryFeatures");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling queryFeatures");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling queryFeatures");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': opts['geogigTransactionId']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.geo+json', 'application/vnd.geo+smile', 'application/vnd.geogig.features+json', 'application/vnd.geogig.features+smile'];
      var returnType = FeatureCollection;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/rpc/query', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the truncate operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~truncateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all features in the layer
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~truncateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.truncate = function(user, repo, layer, geogigTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling truncate");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling truncate");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling truncate");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling truncate");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/features', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchema operation.
     * @callback module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~updateSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/RevisionFeatureType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Layer schema. Must be called inside a transaction.
     * Modify the layer&#39;s number of features at the specified transaction/head. If no head is specified, defaults to WORK_HEAD
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} layer layer name for feature service
     * @param {String} geogigTransactionId transaction identifier, required
     * @param {module:org.geogig.web/org.geogig.web.model/RevisionFeatureType} featureType FeatureType for the layer
     * @param {Object} opts Optional parameters
     * @param {String} opts.head a refSpec string leading to a root RevTree (default to WORK_HEAD)
     * @param {module:org.geogig.web/org.geogig.web.client/FeatureServiceApi~updateSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/RevisionFeatureType}
     */
    this.updateSchema = function(user, repo, layer, geogigTransactionId, featureType, opts, callback) {
      opts = opts || {};
      var postBody = featureType;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateSchema");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling updateSchema");
      }

      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling updateSchema");
      }

      // verify the required parameter 'geogigTransactionId' is set
      if (geogigTransactionId === undefined || geogigTransactionId === null) {
        throw new Error("Missing the required parameter 'geogigTransactionId' when calling updateSchema");
      }

      // verify the required parameter 'featureType' is set
      if (featureType === undefined || featureType === null) {
        throw new Error("Missing the required parameter 'featureType' when calling updateSchema");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'layer': layer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'head': opts['head'],
        'geogig-transaction-id': geogigTransactionId
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = RevisionFeatureType;

      return this.apiClient.callApi(
        '/layers/{user}/{repo}/{layer}/schema', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
