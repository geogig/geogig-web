/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/Error', 'org.geogig.web/org.geogig.web.model/RepositoryInfo', 'org.geogig.web/org.geogig.web.model/StoreInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../org.geogig.web.model/Error'), require('../org.geogig.web.model/RepositoryInfo'), require('../org.geogig.web.model/StoreInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.RepositoryStoresApi = factory(root.Geogig.ApiClient, root.Geogig.Error, root.Geogig.RepositoryInfo, root.Geogig.StoreInfo);
  }
}(this, function(ApiClient, Error, RepositoryInfo, StoreInfo) {
  'use strict';

  /**
   * RepositoryStores service.
   * @module org.geogig.web/org.geogig.web.client/RepositoryStoresApi
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new RepositoryStoresApi. 
   * @alias module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi
   * @class
   * @param {module:org.geogig.web/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:org.geogig.web/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the countStoreRepos operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~countStoreReposCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the number of repositories held on this store
     * @param {String} store Name of the repository store.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~countStoreReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countStoreRepos = function(store, callback) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling countStoreRepos");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/stores/{store}/repos/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createStore operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~createStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/StoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new repository store
     * @param {module:org.geogig.web/org.geogig.web.model/StoreInfo} storeInfo The repository to create
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~createStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/StoreInfo}
     */
    this.createStore = function(storeInfo, callback) {
      var postBody = storeInfo;

      // verify the required parameter 'storeInfo' is set
      if (storeInfo === undefined || storeInfo === null) {
        throw new Error("Missing the required parameter 'storeInfo' when calling createStore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStore operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~getStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/StoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository store info by name
     * @param {String} store Name of the repository store.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~getStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/StoreInfo}
     */
    this.getStore = function(store, callback) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling getStore");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores/{store}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStores operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~getStoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/StoreInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List summary information for available collections of repositories. Only stores visible to the current user are listed.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~getStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/StoreInfo>}
     */
    this.getStores = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [StoreInfo];

      return this.apiClient.callApi(
        '/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStoreRepos operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~listStoreReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List summary information for all repositories on this repository store
     * @param {String} store Name of the repository store.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~listStoreReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/RepositoryInfo>}
     */
    this.listStoreRepos = function(store, callback) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling listStoreRepos");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [RepositoryInfo];

      return this.apiClient.callApi(
        '/stores/{store}/repos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyStore operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~modifyStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/StoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update repository info
     * Updates a repository store
     * @param {module:org.geogig.web/org.geogig.web.model/StoreInfo} storeInfo The repository to update
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~modifyStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/StoreInfo}
     */
    this.modifyStore = function(storeInfo, callback) {
      var postBody = storeInfo;

      // verify the required parameter 'storeInfo' is set
      if (storeInfo === undefined || storeInfo === null) {
        throw new Error("Missing the required parameter 'storeInfo' when calling modifyStore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = StoreInfo;

      return this.apiClient.callApi(
        '/stores', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStore operation.
     * @callback module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~removeStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the repository store configuration (disables all repositories on it)
     * @param {String} store Name of the repository store.
     * @param {module:org.geogig.web/org.geogig.web.client/RepositoryStoresApi~removeStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeStore = function(store, callback) {
      var postBody = null;

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling removeStore");
      }


      var pathParams = {
        'store': store
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/stores/{store}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
