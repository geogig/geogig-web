/**
 * GeoGig Web API
 * GeoGig Web API.  You can find out more about GeoGig at [http://geogig.org](http://geogig.org)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: groldan@boundlessgeo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['org.geogig.web/ApiClient', 'org.geogig.web/org.geogig.web.model/AsyncTaskInfo', 'org.geogig.web/org.geogig.web.model/TransactionInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../org.geogig.web.model/AsyncTaskInfo'), require('../org.geogig.web.model/TransactionInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Geogig) {
      root.Geogig = {};
    }
    root.Geogig.TransactionManagementApi = factory(root.Geogig.ApiClient, root.Geogig.AsyncTaskInfo, root.Geogig.TransactionInfo);
  }
}(this, function(ApiClient, AsyncTaskInfo, TransactionInfo) {
  'use strict';

  /**
   * TransactionManagement service.
   * @module org.geogig.web/org.geogig.web.client/TransactionManagementApi
   * @version 1.0-SNAPSHOT
   */

  /**
   * Constructs a new TransactionManagementApi. 
   * @alias module:org.geogig.web/org.geogig.web.client/TransactionManagementApi
   * @class
   * @param {module:org.geogig.web/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:org.geogig.web/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the abortTransaction operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~abortTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/TransactionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Abort transaction. Returns immediately.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~abortTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/TransactionInfo}
     */
    this.abortTransaction = function(user, repo, transactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling abortTransaction");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling abortTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling abortTransaction");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = TransactionInfo;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}/{transactionId}/abort', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commitTransaction operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~commitTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/AsyncTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit transaction. Async operation.
     * When committing a transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.messageTitle A short (no more than 100 characters) title to summarize the reason this commit is being made
     * @param {String} opts.messageDescription A possibly larger, even spanning multiple paragraphs, description of the reason this commit is applied.
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~commitTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/AsyncTaskInfo}
     */
    this.commitTransaction = function(user, repo, transactionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling commitTransaction");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling commitTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling commitTransaction");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'messageTitle': opts['messageTitle'],
        'messageDescription': opts['messageDescription']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = AsyncTaskInfo;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}/{transactionId}/commit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionInfo operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~deleteTransactionInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transaction information that&#39;s finished but not yet expired.
     * Delete a transaction information. The transaction must be in a finished state (either committed or aborted) for the operation to succeed.
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~deleteTransactionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransactionInfo = function(user, repo, transactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteTransactionInfo");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteTransactionInfo");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling deleteTransactionInfo");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}/{transactionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionInfo operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~getTransactionInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/TransactionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the current status of the given transaction
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {String} transactionId transaction identifier
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~getTransactionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/TransactionInfo}
     */
    this.getTransactionInfo = function(user, repo, transactionId, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getTransactionInfo");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getTransactionInfo");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionInfo");
      }


      var pathParams = {
        'user': user,
        'repo': repo,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = TransactionInfo;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}/{transactionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllTransactions operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listAllTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all non expired transactions open an all the repositories visible to the authenticated user
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listAllTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>}
     */
    this.listAllTransactions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [TransactionInfo];

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRepositoryTransactions operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listRepositoryTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all non expired transactions on the given repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listRepositoryTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>}
     */
    this.listRepositoryTransactions = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listRepositoryTransactions");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling listRepositoryTransactions");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [TransactionInfo];

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserTransactions operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listUserTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all non expired transactions on all the repositories visible to the given user
     * @param {String} user repository login owner
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~listUserTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:org.geogig.web/org.geogig.web.model/TransactionInfo>}
     */
    this.listUserTransactions = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listUserTransactions");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = [TransactionInfo];

      return this.apiClient.callApi(
        '/transactions/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startTransaction operation.
     * @callback module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~startTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:org.geogig.web/org.geogig.web.model/TransactionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new transaction on the given repository
     * @param {String} user repository login owner
     * @param {String} repo repository name
     * @param {module:org.geogig.web/org.geogig.web.client/TransactionManagementApi~startTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.geogig.web/org.geogig.web.model/TransactionInfo}
     */
    this.startTransaction = function(user, repo, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling startTransaction");
      }

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling startTransaction");
      }


      var pathParams = {
        'user': user,
        'repo': repo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'BasicAuth', 'OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/x-jackson-smile'];
      var returnType = TransactionInfo;

      return this.apiClient.callApi(
        '/transactions/{user}/{repo}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
